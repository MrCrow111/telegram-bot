from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, ContextTypes, filters
)

import os

TOKEN = '7169303851:AAEWZX2pwZtLdsduVGagwJv04kHMQMoUheI'
ADMIN_CHAT_ID = 7039411923

# –§–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏
WAITING_FOR_FORM = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("üì• /start –≤—ã–∑–≤–∞–Ω")
    keyboard = [
        [InlineKeyboardButton("–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data='zayavka')],
        [InlineKeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data='info')],
        [InlineKeyboardButton("–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏", callback_data='contact')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ EXCHANGEBOT, –æ—Å—Ç–∞–≤—å —Å–≤–æ—é –∑–∞—è–≤–∫—É –∏ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π!",
        reply_markup=reply_markup
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()
    print(f"üîò –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞: {query.data}")

    if query.data == 'zayavka':
        WAITING_FOR_FORM[user_id] = True
        await query.message.edit_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É:\n\n"
            "1. –°—É–º–º–∞:\n"
            "2. –ò–º—è:\n"
            "3. –ë–∞–Ω–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:\n"
            "4. –ë–∞–Ω–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—è:\n"
            "5. *–ï—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è —Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π:*\n"
            "**–í–∞–ª—é—Ç–Ω—ã–µ –ø–∞—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, USDT -> BTC):**",
            parse_mode='Markdown'
        )

    elif query.data == 'info':
        await query.message.reply_text(
            "**–°–µ—Ä–≤–∏—Å –æ–±–º–µ–Ω–∞ –≤–∞–ª—é—Ç –∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É**\n\n"
            "–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º —Å –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ–º –≤–∞–ª—é—Ç–Ω—ã—Ö –ø–∞—Ä –∏ –±–∞–Ω–∫–∞–º–∏ –º–∏—Ä–∞.\n"
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ ‚Äî –æ—Ç $500.",
            parse_mode='Markdown'
        )

    elif query.data == 'contact':
        await query.message.reply_text("–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏: @bitcoinexchangebiz")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    user_id = user.id
    text = update.message.text

    if WAITING_FOR_FORM.get(user_id):
        print("‚úÖ –ó–∞—è–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        WAITING_FOR_FORM[user_id] = False

        msg = f"üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç @{user.username or user.first_name} (ID: {user.id}):\n\n{text}"
        await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=msg)
        await update.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å–Ω–æ–≤–∞
        await start(update, context)

    else:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")

if __name__ == '__main__':
    print("üóÇÔ∏è –ó–∞–ø—É—â–µ–Ω —Ñ–∞–π–ª:", os.path.abspath(__file__))

    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –±–µ–∑ –æ—à–∏–±–æ–∫ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π.")
    app.run_polling()
